// Generated by CoffeeScript 1.10.0
(function() {
  var R, _, bind, cartesianProduct, multiDim, ref, ref1, rx,
    slice = [].slice;

  rx = (ref = window.rx) != null ? ref : require('reactive-coffee');

  _ = (ref1 = window._) != null ? ref1 : require('underscore');

  R = rx.rxt.tags;

  bind = rx.bind;

  window.multiDim = multiDim = function(arg) {
    var cellData, cellFn, cellOptsFn, colArgs, colArgsList, cols, fmtfn, indexedCellData, rearrangeable, rowArgs, rowArgsList, rows, tableOpts;
    rowArgs = arg.rowArgs, colArgs = arg.colArgs, cellFn = arg.cellFn, cellOptsFn = arg.cellOptsFn, tableOpts = arg.tableOpts, cellData = arg.cellData, fmtfn = arg.fmtfn, rearrangeable = arg.rearrangeable;
    if (tableOpts == null) {
      tableOpts = {};
    }
    if (cellOptsFn == null) {
      cellOptsFn = function() {
        return {};
      };
    }
    if (cellData == null) {
      cellData = null;
    }
    if (fmtfn == null) {
      fmtfn = _.identity;
    }
    if (cellFn == null) {
      cellFn = function() {
        return "";
      };
    }
    rowArgsList = rx.array(rowArgs);
    colArgsList = rx.array(colArgs);
    rows = bind(function() {
      var num;
      num = _.reduce(rowArgsList.all(), function(memo, arg1) {
        var values;
        values = arg1.values;
        return memo * values.length;
      }, 1);
      return {
        num: num,
        heights: (function() {
          var accum;
          accum = num;
          return rowArgsList.all().map(function(arg1) {
            var values;
            values = arg1.values;
            return accum /= values.length;
          });
        })(),
        values: cartesianProduct.apply(null, rowArgsList.map(function(arg1) {
          var fmtfn, name, values;
          name = arg1.name, values = arg1.values, fmtfn = arg1.fmtfn;
          return values.map(function(value) {
            return {
              name: name,
              value: value,
              display: (fmtfn != null ? fmtfn : _.identity)(value)
            };
          });
        }).all())
      };
    });
    cols = bind(function() {
      var num, values;
      num = _.reduce(colArgsList.all(), function(memo, arg1) {
        var values;
        values = arg1.values;
        return memo * values.length;
      }, 1);
      values = cartesianProduct.apply(null, colArgsList.map(function(arg1) {
        var name, values;
        name = arg1.name, values = arg1.values;
        return values.map(function(value) {
          return {
            name: name,
            value: value,
            display: (fmtfn != null ? fmtfn : _.identity)(value)
          };
        });
      }).all());
      return {
        num: num,
        widths: (function() {
          var accum;
          accum = num;
          return colArgsList.all().map(function(arg1) {
            var values;
            values = arg1.values;
            return accum /= values.length;
          });
        })(),
        values: values
      };
    });
    if (cellData) {
      indexedCellData = _.object(cellData.map(function(arg1) {
        var input, output;
        input = arg1.input, output = arg1.output;
        return [JSON.stringify(_.pluck(_.sortBy(input, 'name'), 'value')), output];
      }));
    } else {
      indexedCellData = {};
    }
    return R.table(tableOpts, _.flatten([
      R.thead({}, rx.flatten([
        bind(function() {
          return colArgsList.all().map(function(arg1, ci) {
            var fmtfn, i, name, ref2, results, values;
            name = arg1.name, values = arg1.values, fmtfn = arg1.fmtfn;
            return R.tr({}, _.flatten([
              rearrangeable ? R.th({
                colspan: bind(function() {
                  return rowArgsList.length();
                }),
                "class": 'corner-cell'
              }, R.span({
                "class": 'btn-group'
              }, (function() {
                var val;
                val = colArgsList.at(ci);
                return [
                  colArgsList.length() > 1 ? R.button({
                    "class": 'btn btn-xs btn-default',
                    click: function() {
                      return rx.transaction(function() {
                        colArgsList.removeAt(ci);
                        return rowArgsList.push(val);
                      });
                    }
                  }, '<') : void 0, ci > 0 ? R.button({
                    "class": 'btn btn-default btn-xs',
                    click: function() {
                      return rx.transaction(function() {
                        colArgsList.removeAt(ci);
                        return colArgsList.insert(val, ci - 1);
                      });
                    }
                  }, '^') : void 0, ci < colArgsList.length() - 1 ? R.button({
                    "class": 'btn btn-default btn-xs',
                    click: function() {
                      return rx.transaction(function() {
                        colArgsList.removeAt(ci);
                        return colArgsList.insert(val, ci + 2);
                      });
                    }
                  }, 'v') : void 0
                ];
              })())) : void 0, !rearrangeable && ci === 0 ? R.th({
                "class": 'corner-cell',
                rowspan: bind(function() {
                  return colArgsList.length();
                }),
                colspan: bind(function() {
                  return rowArgsList.length();
                })
              }) : void 0, (function() {
                results = [];
                for (var i = 0, ref2 = cols.get().num / (cols.get().widths[ci] * values.length); 0 <= ref2 ? i < ref2 : i > ref2; 0 <= ref2 ? i++ : i--){ results.push(i); }
                return results;
              }).apply(this).map(function() {
                return values.map(function(argVal) {
                  return R.th({
                    title: name,
                    colspan: cols.get().widths[ci],
                    style: bind(function() {
                      if (ci === colArgsList.length() - 1) {
                        return {
                          borderBottom: 'none'
                        };
                      }
                    })
                  }, (fmtfn != null ? fmtfn : _.identity)(argVal));
                });
              })
            ]));
          });
        }), bind(function() {
          var i, j, ref2, ref3, results, results1;
          if (rowArgsList.length() > 1 && rearrangeable) {
            return R.tr({}, rx.flatten([
              (function() {
                results = [];
                for (var i = 0, ref2 = rowArgsList.length(); 0 <= ref2 ? i < ref2 : i > ref2; 0 <= ref2 ? i++ : i--){ results.push(i); }
                return results;
              }).apply(this).map(function(__, ri) {
                return R.th({
                  "class": 'corner-cell'
                }, R.span({
                  "class": 'btn-group'
                }, (function() {
                  var val;
                  val = rowArgsList.at(ri);
                  return [
                    rowArgsList.length() > 1 ? R.button({
                      "class": 'btn btn-xs btn-default',
                      click: function() {
                        return rx.transaction(function() {
                          rowArgsList.removeAt(ri);
                          return colArgsList.push(val);
                        });
                      }
                    }, '^') : void 0, ri > 0 ? R.button({
                      "class": 'btn btn-xs btn-default',
                      click: function() {
                        return rx.transaction(function() {
                          rowArgsList.removeAt(ri);
                          return rowArgsList.insert(val, ri - 1);
                        });
                      }
                    }, '<') : void 0, ri < rowArgsList.length() - 1 ? R.button({
                      "class": 'btn btn-xs btn-default',
                      click: function() {
                        return rx.transaction(function() {
                          rowArgsList.removeAt(ri);
                          return rowArgsList.insert(val, ri + 2);
                        });
                      }
                    }, '>') : void 0
                  ];
                })()));
              }), (function() {
                results1 = [];
                for (var j = 0, ref3 = cols.get().values.length; 0 <= ref3 ? j < ref3 : j > ref3; 0 <= ref3 ? j++ : j--){ results1.push(j); }
                return results1;
              }).apply(this).map(function() {
                return R.th({
                  style: {
                    borderTop: 'none'
                  }
                });
              })
            ]));
          }
        })
      ])), R.tbody({}, bind(function() {
        return rows.get().values.map(function(row, rowNum) {
          return R.tr({}, rx.flatten(_.flatten((function() {
            return [
              row.map(function(arg1, rowIndex) {
                var display, name, value;
                name = arg1.name, value = arg1.value, display = arg1.display;
                return bind(function() {
                  if (rowNum % rows.get().heights[rowIndex] === 0) {
                    return R.th({
                      rowspan: rows.get().heights[rowIndex],
                      title: name
                    }, display);
                  } else {
                    return null;
                  }
                });
              }), bind(function() {
                return cols.get().values.map(function(col) {
                  var argDict, argString, argVals, cellVal;
                  argVals = _.sortBy(row.concat(col), 'name');
                  argString = JSON.stringify(_.pluck(argVals, 'value'));
                  argDict = _.object(argVals.map(function(arg1) {
                    var name, value;
                    name = arg1.name, value = arg1.value;
                    return [name, value];
                  }));
                  cellVal = argString in indexedCellData ? indexedCellData[argString] : cellFn(argDict);
                  return R.td(_.extend({}, cellOptsFn(cellVal, argDict)), fmtfn(cellVal, argDict));
                });
              })
            ];
          })())));
        });
      }))
    ]));
  };

  cartesianProduct = function() {
    var lists, prod, r;
    lists = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (lists.length > 1) {
      r = [];
      prod = cartesianProduct.apply(null, lists.slice(1));
      lists[0].map(function(item) {
        return prod.map(function(product) {
          return r.push([item].concat(product));
        });
      });
      return r;
    } else {
      return lists[0].map(function(item) {
        return [item];
      });
    }
  };

}).call(this);

//# sourceMappingURL=main.js.map
